<!--page adress-->
@page "/profile"

<!--libraries/nuget-packages/directories-->
@using locustrace.Client.Services
@using locustrace.Shared

<!--dependecy injections-->
@inject ISessionHandlerService SessionHandler
@inject NavigationManager NavigationManager

<div class="d-flex flex-column justify-content-center">
    <div class="d-flex justify-content-center">
        <h4>Welcome, @username!</h4>
    </div>
    <div class="d-flex justify-content-center">
        <button class="btn rounded tf-lightblue-text tf-darkblue-border" @onclick="LogOut">Logout</button>
    </div>
    <div class="d-flex flex-column justify-content-center mt-5">
        <div class="d-flex justify-content-center">
            <h4>Upload your customer logo:</h4>
        </div>
        <div class="d-flex justify-content-center form-control-file">
            <!--input component for logo customization-->
            <InputFile OnChange="OnFileChange" class="tf-file-input"/>
        </div>
        <div class="d-flex justify-content-center">
            <button class="btn rounded tf-lightblue-text tf-darkblue-border" @onclick="@(() => UploadImage(@imageData))">Upload logo</button>
        </div>
    </div>
</div>

@code {
    public string username;
    public string token;

    public string imageData;

    //method to fetch user information and a easy token verification
    protected override async Task OnInitializedAsync()
    {
        username = await SessionHandler.GetUsername();
        token = await SessionHandler.GetToken();

        if(token != "")
        {
            token = "ok";
        }
        else
        {
            token = "missing";
        }
    }

    //logs out the user and removes information stored in session
    public async void LogOut()
    {
        SessionHandler.EndSession();
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    //creates a source string of the image when changes occur in InputFile-component
    public async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    }

    //"uploads" the image and stores the path in session, then refreshes for the changes to appear
    public async Task UploadImage(string imageData)
    {
        await SessionHandler.SetLogo(imageData);
        NavigationManager.NavigateTo("/profile", forceLoad: true);
    }
}
